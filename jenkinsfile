pipeline {
    agent any 
    environment {
        GITHUB_TOKEN = credentials('github-token') // Retrieve the Git token from Jenkins credentials
        SONAR_TOKEN = credentials('sonar_token')
        SONAR_HOST_URL = 'http://localhost:9000'
    }
    stages {
        stage ("Clean up"){
            steps {
                 deleteDir()
            }
        }
        stage ("Clone repo"){
            steps {
                sh "git clone https://github.com/Melek-ElHajri/astonvilla-app.git"
            }
        }
        stage("SonarQube Analysis") {
            steps {
                script {
                    def scannerHome = tool 'SonarQube Scanner' 
                    withSonarQubeEnv('sonar') { 
                        dir('r') { // Répertoire du dépôt cloné
                            sh "${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=astonvilla \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=${env.SONARQUBE_URL} \
                                -Dsonar.login=${SONAR_TOKEN}" 
                        }
                    }
                }
            }
        }
        stage('Run Sonar Server') {
            steps {
              sh "docker-compose -f sonar-docker-compose.yaml up -d"
            }
        }
        stage ("Generate docker image") {
            steps {
                 dir("astonvilla-app"){
                    sh "docker build -t m2l2k/astonvilla:1.1.${env.BUILD_NUMBER} ."
                }                
            }
        }
        stage ("push docker image") {
            steps {
              sh "docker push m2l2k/astonvilla:1.1.${env.BUILD_NUMBER}"
            }
        }
        stage ("clone gitops repo") {
            steps {
              sh "git clone https://github.com/Melek-ElHajri/argocd.git"
            }
        }
        stage ("change image tag") {
            steps {
             dir('argocd/astonvilla-app'){
                script{
                  def deployment = readFile('astonvilla-deployment.yaml')
                  def updatedDeployment = deployment.replaceAll(/astonvilla:\s*[\w.-]+/, "astonvilla:1.1.${env.BUILD_NUMBER}")
                  writeFile file: 'astonvilla-deployment.yaml', text: updatedDeployment
                }
              }
            }
        }
         stage ("commit changes") {
            steps {
            dir('argocd/astonvilla-app'){
                script{
                      sh 'git config user.email "jenkins@agent.com"'
                      sh 'git config user.name "jenkins-admin"'
                      sh 'git add astonvilla-deployment.yaml'
                      sh 'git commit -m "updated image tag"'
                      sh 'git push https://Melek-ElHajri:${GITHUB_TOKEN}@github.com/Melek-ElHajri/argocd.git master'
                }
              }
            }
        }
    }
}
