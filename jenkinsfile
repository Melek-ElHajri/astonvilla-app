pipeline {
    agent any 
    environment {
        GITHUB_TOKEN = credentials('github-token') // Retrieve the Git token from Jenkins credentials
    }
    stages {
        stage ("Clean up"){
            steps {
                 deleteDir()
            }
        }
        stage ("Clone repo"){
            steps {
                sh "git clone https://github.com/Melek-ElHajri/astonvilla-app.git"
            }
        }
        stage("SonarQube Analysis") {
            steps {
                script {
                    def scannerHome = tool 'SonarQube Scanner'  // Ensure 'SonarQube Scanner' is configured in Jenkins
                    withSonarQubeEnv('sonar') {  // Ensure 'sonar' matches the SonarQube server configuration in Jenkins
                        dir('r') {  // Directory of the cloned repository
                            withCredentials([string(credentialsId: 'astonvilla', variable: 'SONARQUBE_TOKEN')]) {
                                sh """
                                    ${scannerHome}/bin/sonar-scanner \
                                    -Dsonar.projectKey=astonvilla-app \
                                    -Dsonar.sources=. \
                                    -Dsonar.host.url=${env.SONARQUBE_URL} \
                                    -Dsonar.login=${SONARQUBE_TOKEN}
                                """
                            }
                        }
                    }
                }
            }
        }

        stage ("Generate docker image") {
            steps {
                 dir("astonvilla-app"){
                    sh "docker build -t m2l2k/astonvilla:1.1.${env.BUILD_NUMBER} ."
                }                
            }
        }
        stage ("push docker image") {
            steps {
                 dir("astonvilla-app"){
                    sh "docker push m2l2k/astonvilla:1.1.${env.BUILD_NUMBER}"
                }                
            }
        }
    }
}
